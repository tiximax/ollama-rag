name: offline-eval

on:
  push:
    branches: [ master, main ]
  pull_request:

jobs:
  eval:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Ollama (Linux)
        shell: bash
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          nohup ollama serve >/dev/null 2>&1 &
          for i in {1..40}; do
            if curl -fsS http://127.0.0.1:11434/api/tags >/dev/null; then echo "Ollama up"; break; fi; sleep 1;
          done
          ollama pull tinyllama
          ollama pull nomic-embed-text

      - name: Start server
        run: |
          nohup python -m uvicorn app.main:app --host 127.0.0.1 --port 8000 >/dev/null 2>&1 &
          for i in {1..40}; do
            if curl -fsS http://127.0.0.1:8000 >/dev/null; then echo OK; break; fi
            sleep 0.5
          done

      - name: Ingest sample docs
        env:
          PYTHONPATH: .
        run: |
          python scripts/ingest.py

      - name: Run offline eval (expect recall@k == 1.0)
        shell: bash
        run: |
          body='{"k":5,"method":"bm25","db":"chroma","queries":[{"query":"What does the Highway Code require?","expected_sources":["en_traffic_sample.txt"],"versions":["en1"]},{"query":"Luật giao thông yêu cầu gì?","expected_sources":["traffic_law_sample.txt"],"versions":["vi1"]}]}'
          resp=$(curl -fsS -X POST http://127.0.0.1:8000/api/eval/offline -H 'Content-Type: application/json' -d "$body")
          echo "$resp"
          python - <<'PY'
import json,sys
j=json.loads(open(0).read())
rec=j.get('recall_at_k',0)
if rec < 0.99:
  print(f"recall_at_k too low: {rec}")
  sys.exit(1)
print("recall_at_k ok:",rec)
PY
